// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: kubebrainz.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeBrainzService_GetStatus_FullMethodName = "/kubebrainz.KubeBrainzService/GetStatus"
	KubeBrainzService_GetArtist_FullMethodName = "/kubebrainz.KubeBrainzService/GetArtist"
)

// KubeBrainzServiceClient is the client API for KubeBrainzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeBrainzServiceClient interface {
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	GetArtist(ctx context.Context, in *GetArtistRequest, opts ...grpc.CallOption) (*GetArtistResponse, error)
}

type kubeBrainzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeBrainzServiceClient(cc grpc.ClientConnInterface) KubeBrainzServiceClient {
	return &kubeBrainzServiceClient{cc}
}

func (c *kubeBrainzServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, KubeBrainzService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeBrainzServiceClient) GetArtist(ctx context.Context, in *GetArtistRequest, opts ...grpc.CallOption) (*GetArtistResponse, error) {
	out := new(GetArtistResponse)
	err := c.cc.Invoke(ctx, KubeBrainzService_GetArtist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeBrainzServiceServer is the server API for KubeBrainzService service.
// All implementations should embed UnimplementedKubeBrainzServiceServer
// for forward compatibility
type KubeBrainzServiceServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	GetArtist(context.Context, *GetArtistRequest) (*GetArtistResponse, error)
}

// UnimplementedKubeBrainzServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKubeBrainzServiceServer struct {
}

func (UnimplementedKubeBrainzServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedKubeBrainzServiceServer) GetArtist(context.Context, *GetArtistRequest) (*GetArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtist not implemented")
}

// UnsafeKubeBrainzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeBrainzServiceServer will
// result in compilation errors.
type UnsafeKubeBrainzServiceServer interface {
	mustEmbedUnimplementedKubeBrainzServiceServer()
}

func RegisterKubeBrainzServiceServer(s grpc.ServiceRegistrar, srv KubeBrainzServiceServer) {
	s.RegisterService(&KubeBrainzService_ServiceDesc, srv)
}

func _KubeBrainzService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeBrainzServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeBrainzService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeBrainzServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeBrainzService_GetArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeBrainzServiceServer).GetArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeBrainzService_GetArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeBrainzServiceServer).GetArtist(ctx, req.(*GetArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeBrainzService_ServiceDesc is the grpc.ServiceDesc for KubeBrainzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeBrainzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubebrainz.KubeBrainzService",
	HandlerType: (*KubeBrainzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _KubeBrainzService_GetStatus_Handler,
		},
		{
			MethodName: "GetArtist",
			Handler:    _KubeBrainzService_GetArtist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubebrainz.proto",
}
